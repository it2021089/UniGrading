"""
Django settings for UniGrading project.
Generated by 'django-admin startproject' using Django 5.1.x.
"""
from pathlib import Path
import os

# -------------------------
# Paths / Core
# -------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY") or "django-insecure-dev-key"
DEBUG = os.getenv("DEBUG", "1") == "1"

# Allow override from env; keep your defaults
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost,unigrading").split(",")

X_FRAME_OPTIONS = "SAMEORIGIN"

# -------------------------
# Apps
# -------------------------
INSTALLED_APPS = [
    "jazzmin",
    "view_breadcrumbs",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",

    # project apps
    "users",
    "subjects",
    "assignments",
    "grades",
    "UniGrading",
    "tests",

    # third-party
    "storages",
    "widget_tweaks",
]

AUTH_USER_MODEL = "users.CustomUser"

AUTHENTICATION_BACKENDS = [
    "users.backends.CustomAuthentication",
    "django.contrib.auth.backends.ModelBackend",
]

# -------------------------
# Middleware / URLs / Templates / WSGI
# -------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "UniGrading.middleware.BreadcrumbMiddleware",
]

ROOT_URLCONF = "UniGrading.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "UniGrading.wsgi.application"

# -------------------------
# Database (SQLite for dev)
# -------------------------
_db = os.getenv("DATABASE_URL", "").strip()
if _db:
    if _db.startswith("sqlite:///"):
        _db = _db.replace("sqlite:///", "", 1)
    DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": _db}}
else:
    DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": BASE_DIR / "db.sqlite3"}}

# -------------------------
# Static & Media
# -------------------------
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"

# --- MinIO / S3 (django-storages) ---
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID") or "minioadmin"
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY") or "minioadmin"
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME") or "files"
AWS_S3_ENDPOINT_URL = os.getenv("AWS_S3_ENDPOINT_URL") or "http://minio:9000"

AWS_S3_REGION_NAME = "us-east-1"
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ADDRESSING_STYLE = "path"   # MinIO-friendly
AWS_S3_URL_PROTOCOL = "http:"      # plain http to the MinIO service
AWS_QUERYSTRING_AUTH = True
AWS_DEFAULT_ACL = None

# Django 5 STORAGES â€” S3/MinIO is the default for FileField and default_storage
STORAGES = {
    "default": {"BACKEND": "storages.backends.s3boto3.S3Boto3Storage"},
    "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
}

# -------------------------
# Auth / i18n / TZ
# -------------------------
LOGIN_URL = "/login/"

LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("TIME_ZONE", "UTC")
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -------------------------
# Password validation
# -------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -------------------------
# Logging
# -------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "INFO"},
    "loggers": {"django": {"handlers": ["console"], "level": "INFO", "propagate": True}},
}

# -------------------------
# Celery / Redis (for autograding)
# -------------------------
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
CELERY_TASK_TIME_LIMIT = 300
CELERY_TASK_SOFT_TIME_LIMIT = 240
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Beat job: scan every 60s for assignments whose due_date has passed and enqueue once
CELERY_BEAT_SCHEDULE = {
    "enqueue-due-autogrades": {
        "task": "assignments.tasks.enqueue_due_autogrades",
        "schedule": 60.0,
    }
}
