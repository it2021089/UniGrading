services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data
    restart: unless-stopped

  # Docker daemon (Docker-in-Docker) used to run student code safely in containers
  dind:
    image: docker:27-dind
    container_name: dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""          # dev convenience; enable TLS in prod
    command: ["--host=tcp://0.0.0.0:2375"]
    volumes:
      - dind-storage:/var/lib/docker
    restart: unless-stopped

  # Queue for background jobs (Celery broker/result backend)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped

  unigrading:
    build: .
    container_name: unigrading
    depends_on:
      - minio
      - dind
      - redis
    volumes:
      - ./UniGrading:/UniGrading  
    working_dir: /UniGrading
    environment:
      DJANGO_SETTINGS_MODULE: UniGrading.settings
      DATABASE_URL: ${DATABASE_URL:-/UniGrading/db.sqlite3}  

      # pull secrets/config from .env (not committed)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AUTOGRADER_USE_LLM: ${AUTOGRADER_USE_LLM:-1}
      AUTOGRADER_REQUIRE_LLM: ${AUTOGRADER_REQUIRE_LLM:-1}
      OPENAI_TEXT_MODEL: ${OPENAI_TEXT_MODEL:-gpt-5-mini}
      OPENAI_CODE_MODEL: ${OPENAI_CODE_MODEL:-gpt-5-mini}

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID} 
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}

      # ---- Autograder (execution) ----
      DOCKER_HOST: tcp://dind:2375
      AUTOGRADER_ENABLE_DOCKER: "1"
      AUTOGRADER_DISABLE_DOCKER: "0"
      AUTOGRADER_ENABLE_LOCAL_EXEC: "0"   
      AUTOGRADER_TIMEOUT_SEC: "180"
      AUTOGRADER_MAX_LOG_BYTES: "200000"

      # ---- Celery / Redis (background grading) ----
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/0}

      # --- Django misc (optional) ---
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-dev-key}
      DEBUG: ${DEBUG:-1}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-127.0.0.1,localhost,unigrading}

    ports:
      - "8000:8000"  
    # Optional: faster temp IO during builds/runs
    tmpfs:
      - /tmp/autograder:exec
    restart: unless-stopped

  # Celery worker running the autograder jobs in the background
  worker:
    build: .
    container_name: unigrading-worker
    depends_on:
      - redis
      - dind
      - minio
    volumes:
      - ./UniGrading:/UniGrading
    working_dir: /UniGrading
    environment:
      DJANGO_SETTINGS_MODULE: UniGrading.settings

      # same runtime env as web (needs Docker + S3 + LLM)
      DOCKER_HOST: tcp://dind:2375
      AUTOGRADER_ENABLE_DOCKER: "1"
      AUTOGRADER_DISABLE_DOCKER: "0"
      AUTOGRADER_ENABLE_LOCAL_EXEC: "0"
      AUTOGRADER_TIMEOUT_SEC: "180"
      AUTOGRADER_MAX_LOG_BYTES: "200000"

      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AUTOGRADER_USE_LLM: ${AUTOGRADER_USE_LLM:-1}
      AUTOGRADER_REQUIRE_LLM: ${AUTOGRADER_REQUIRE_LLM:-1}
      OPENAI_TEXT_MODEL: ${OPENAI_TEXT_MODEL:-gpt-5-mini}
      OPENAI_CODE_MODEL: ${OPENAI_CODE_MODEL:-gpt-5-mini}

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID} 
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY} 
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}

      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/0}

      # --- Django misc (optional) ---
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-dev-key}
      DEBUG: ${DEBUG:-1}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-127.0.0.1,localhost,unigrading}

    command: >
      sh -c "celery -A UniGrading.celery_app worker -l info --concurrency=1"
    restart: unless-stopped

volumes:
  minio-data:
  dind-storage:
